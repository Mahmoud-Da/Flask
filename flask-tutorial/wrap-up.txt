*** Flask Tutorial #1  ***

- flask is
a micro web framework for building
websites with Python.


- typically used as kind of a back-end and
then another front-end is connected to
it using something called a restful api

- flask itself so this is more of a micro framework rather than a full-fledged web
framework and that also means that it doesn't include a lot of the nice tools
that come with Django like user authentication and database connectivity and all of those kind of things.

- how to build a page using a flask
- create a folder "flask-tutorial"
- first we install flask 
  -- cd flask-tutorial
  -- pip install flask

- now we will create tutorial1.py
- inside the tutorial1.py

- first we will import flask
-------------------code----------------------
from flask import Flask
-------------------code----------------------

- create an instance of a flask web application
-------------------code----------------------
app = Flask(__name__)
-------------------code----------------------

- run the app
-------------------code----------------------
if __name__ == "__main__":
    app.run()
-------------------code----------------------

- define the pages that will be on our website so
the first page we will called home so make a function and this 
function is gonna return what's gonna be displayed on the page

we're gonna return some inline HTML now all that means is you can literally just
write HTML in this string or you can just write some text and that will be
displayed as well

-------------------code----------------------
def home():
    return "Hello! this is the main page"
-------------------code----------------------

even we can add a link could add like an h1 tag

-------------------code----------------------
def home():
    return "Hello! this is the main page <h1>Hello</h1>"
-------------------code----------------------


last step is define how we can access this specific page
so right now flask actually doesn't know where we should be going to get to this
page so we need to give it a route now

to do that gonna decorate
this function with app dot root so put

the @ sign then app dot root and inside
here we're gonna define the path that we
want to use to get to this function

-------------------code----------------------
@app.route("/") => defualt path

or 
@app.route("/home") => function name
-------------------code----------------------

- run the application
-------------------code----------------------
python3 "tutorial1.py"
-------------------code----------------------

- if we tried to go to undefined route we will have error 

- now we are going to create another page 
actually decide to put some
things in beside in between tags of app.route like
this this means that whenever I type

something it's actually gonna grab that
value and pass it to the function as a
parameter
-------------------code----------------------
@app.route("/<name>")
def user(name):
    return f"Hello {name}"
-------------------code----------------------

which means if i @app.route("/<name>")
if i enter th url ex: http://127.0.0.1:5000/car

i will have 
Hello car

ex: http://127.0.0.1:5000/dodo
i will have 
Hello dodo


- now if we want to get to a different page
sometimes user goes to a page
maybe they're not supposed to be there
they're not authenticated we need to
redirect them

first 
-------------------code----------------------
from flask import Flask, redirect, url_for
-------------------code----------------------

these [redirect, url_for] are going
to allow us to actually return a
redirect from a specific function

-------------------code----------------------
@app.route("/admin")
def admin():
    return redirect(url_for("home"))
-------------------code----------------------
here we go to admin it will redirect us to what we have in home function otherword the home function



- how to redirect to function that has arguments

-------------------code----------------------
@app.route("/admin")
def admin():
    return redirect(url_for("user", name="moody!"))
-------------------code----------------------
with that 
t's gonna return the URL for user and it's gonna
pass through the argument admin which means it will print "Hello moody!"


if ww add // to the router we can access 
-------------------code----------------------
@app.route("/admin/")
-------------------code----------------------
we can access
http://127.0.0.1:5000/admin/ or
http://127.0.0.1:5000/admin

*** Flask Tutorial #2 - HTML Templates *** 
how we can use our own HTML Javascript CSS all of
that with this kind of Python back-end

- we will import  render_template
function is gonna allow us to do is
actually grab a DML file
-------------------code----------------------
from flask import Flask, redirect, url_for, render_template
-------------------code----------------------
- creating an HTML file and we need to put that in a specific directory we must named templates and must be
near our script which run the web application (tutorial2.py)
inside we will craete html files ex: index.html

to render it 
in the script file we we return render_template("{html file name}.html")
-------------------code----------------------
def home():
    return render_template("index.html")
-------------------code----------------------


- how to show dynamic information ex: display the user name on the screen
-------------------code----------------------
@app.route("/<name>")
def home(name):
    return render_template("index.html")
-------------------code----------------------

- in our html file by using {{}} we can type like parameter ex
-------------------code----------------------
<p>Hello! {{content}}</p>
-------------------code----------------------

- then in the home function we can set the content parameter to the name of home parameter
-------------------code----------------------
def home(name):
    return render_template("index.html", content=name)
-------------------code----------------------

- we can also add multi parameters
-------------------code----------------------
def home(name):
    return render_template("index.html", content=name, number=2)
-------------------code----------------------

-------------------code----------------------
<body>
  <h1>Home Page!</h1>
  <p>Hello! {{content}}</p>
  <p>id {{number}}</p>
</body>
-------------------code----------------------

- if we want to pass alot of parameters 
we can type python code inside the html templates by adding {% inside we write the code %}
-------------------code----------------------
{% for i in range(0, 10) %}
  <p>Hello</p>
{% endfor%}
-------------------code----------------------

the same thing for if statement
-------------------code----------------------
{% for x in range(0, 10) %}
{% if x % 2 == 1 %}
  <p>{{x}}</p>
{% endif %}
{% endfor%}
-------------------code----------------------


- more examples 
- pass list to our index
-------------------code----------------------
def home(name):
    return render_template("index.html", content=name, number=2, list_content=["jim", "lili", "moody"])

HTML:

{% for x in list_content %}
 <p>{{x}}</p>
{% endfor %}

-------------------code----------------------

- add multi conditions to the list 
-------------------code----------------------
{% for x in list_content %}
  {% if x == "jim" %}
    <p>Hello miss {{x}}</p>
  {% elif x == "lili" %}
    <p>Hello madam {{x}}</p>
  {% else %}
    <p>Hello  {{x}}</p>
  {% endif %}
{% endfor %}
-------------------code----------------------


*** Flask Tutorial #3 - Adding Bootstrap and Template Inheritance *** 

template inheritance: which is an extremely useful tool so you're not
repeating HTML code or JavaScript orwhatever it's gonna be throughout your
entire website it essentially allows you to create kind of a base template thatevery
other one of your templates will work off of

fisrt we are going to create a html file we called base.html and craete inside it html template


inheritance that:
essentially means use
everything from the "base code/ tempalte" and then change a few small
things are overwrite some functionality of the parent which in this
case is gonna be the base.html

so the way that we can allow our child
templates to change specific functionality of the base template is by
adding something called blocks and we can name it for this example we can use content, title any parameter
so in the base.html (parent tempalte)
-------------------code----------------------
title>{% block title%} {% endblock title%}</title>

# and inside the body
{% block content %} {% endblock content %}
-------------------code----------------------

in the index.html (child tempalte)
first we extend the block
ex: {% extends 'path to the file' %}
what we add what we want between the blocks
-------------------code----------------------
{% extends 'base.html' %} {% block title%} Home Page {% endblock title%} {%
block content %}
<h1>Test</h1>
{% endblock content %}

-------------------code----------------------

PS:
if we set app.run to debug= true 

allow us to not have to rerun the server every time
we make a change because it will automatically be detecting those changes 
and updating the website for us
-------------------code----------------------
if __name__ == "__main__":
    app.run(debug=True)
-------------------code----------------------

and we can see in the log when we run the server that the debugger is active
-------------------code----------------------
 * Debugger is active!
 * Debugger PIN: 458-486-685
127.0.0.1 - - [17/May/2024 16:01:26] "GET / HTTP/1.1" 200 -
127.0.0.1 - - [17/May/2024 16:01:30] "GET / HTTP/1.1" 200 -
-------------------code----------------------


- to add Bootstrap
just grap the Bootstrap link and add it to base.html

to test our code we navbar in the base tempalte and every child will have nav in it`s code

*** Flask Tutorial #4 - HTTP Methods (GET/POST) & Retrieving Form Data ***

- we will create page with dialog box that when we prees the submit button the data go to the server using POST method
the routes that we decorate in our script (app.py) has Get method by defualt but if we want to add get and post 
we have to use methods argument

-------------------code----------------------
@app.route("/login", methods=["POST", "GET"])
-------------------code----------------------

- now we define login and user 
-------------------code----------------------
@app.route("/login", methods=["POST", "GET"])
def login():
    return render_template("form.html")


@app.route("/<usr>")
def user(usr):
    return f"<h1>{usr}</h1>"

-------------------code----------------------

now we craete login.html and inside the content we set the form action to # which means we want 
to post the information in the same page of course with post methos
and we change the input 
-------------------code----------------------
<form action="#" method="post">

<input
      type="text"
      class="form-control"
      id="exampleInputEmail1"
      aria-describedby="emailHelp"
      name="nm"      #=> add name



<button type="submit" class="btn btn-primary" value="submit">Submit</button>  => we set the value to submit
-------------------code----------------------

now we check the log to see that when submit there is POST method or GET method when we refresh our page
-------------------code----------------------
127.0.0.1 - - [17/May/2024 18:25:06] "POST /login HTTP/1.1" 200 -
127.0.0.1 - - [17/May/2024 18:25:10] "GET /login HTTP/1.1" 200 -
-------------------code----------------------

-  we determine in this login function whether we called the get
request or whether we call the post request

first we import request
-------------------code----------------------
from flask import Flask, redirect, url_for, render_template, request
-------------------code----------------------

- then we will write logice like if request is post to do some thing but if the request is not POST 
which means we didn`t submit the the form button render the login.html in other word keep rendering login.html
unless we submit the button

-------------------code----------------------
@app.route("/login", methods=["POST", "GET"])
def login():
    if request.method == "POST":
        return do somthing
    else:
        return render_template("login.html")
-------------------code----------------------

now to acces to the value of the form 
to do that user equals request.form["the value of the dictionary key of the html element"]

here we create varible and saved the user from the form then redirect to that user page
-------------------code----------------------
def login():
    if request.method == "POST":
        user = request.form["nm"]
        return return redirect(url_for("user", usr=user))
    else:
        return render_template("login.html")
-------------------code----------------------
